service: upload-file-aws-s3bucket

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  lambdaHashingVersion: 20201221
  httpApi:
    cors: true
  environment:
    TABLE_NAME: ${self:custom.tableName}

custom:
  fileUploadBucketName: ${self:service}-${self:provider.stage}-bucket
  tableName: CsvToDynamoDB
  writeToFileBucketName: ${self:provider.stage}-write-to-file-bucket

plugins:
  - serverless-iam-roles-per-function
functions:
  fileUpload:
    handler: src/handler.createSignedUrl
    events:
      - httpApi:
          method: post
          path: /fileUpload
    environment:
      BUCKET_NAME: ${self:custom.fileUploadBucketName}

  migrateToDynamoDb:
    handler: src/handler.migrateDataToDynamoDb
    events:
      - s3:
          bucket: ${self:custom.fileUploadBucketName}
          event: s3:ObjectCreated:*
          existing: true
    environment:
      BUCKET_NAME: ${self:custom.fileUploadBucketName}
      REGION: 'us-east-2'

  readFromDynamoDB:
    handler: src/handler.readFromDynamoDB
    events:
      - httpApi:
          method: post
          path: /readData
    environment:
      TABLE_NAME: ${self:custom.tableName}

  updateDynamoDbData:
    handler: src/handler.updateDynamoDbData
    events:
      - httpApi:
          method: put
          path: /updateData/{id}
    environment:
      TABLE_NAME: ${self:custom.tableName}

  deleteDynamoDbData:
    handler: src/handler.deleteDynamoDbData
    events:
      - httpApi:
          method: delete
          path: /deleteData/{id}
    environment:
      TABLE_NAME: ${self:custom.tableName}

  writeDynamoDbDataToFile:
    handler: src/handler.writeDynamoDbDataToFile
    events:
      - httpApi:
          method: get
          path: /writeToFile
    environment:
      TABLE_NAME: ${self:custom.tableName}
      BUCKET_NAME: ${self:custom.writeToFileBucketName}

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: PublicRead
    WriteFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.writeToFileBucketName}
        AccessControl: PublicRead
    CsvToDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: StockCode
            AttributeType: S
        KeySchema:
          - AttributeName: StockCode
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
